# Al crear un issue, se agrega al Backlog
# Comando para crear un backlog
name: workflow Agregar Issue al Backlog

on:
  issue_comment:
    types: [created]

jobs:
  add_to_backlog:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      projects: write
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Setup GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extraer informaciÃ³n y verificar permisos
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_OWNER: ${{ github.event.repository.owner.login }}
          REPO_NAME: ${{ github.event.repository.name }}
          COMMENT_AUTHOR: ${{ github.event.comment.user.login }}
        run: |
          if [[ "$COMMENT_BODY" =~ ^/add-backlog\ (.*)$ ]]; then
            COLUMN_NAME=${BASH_REMATCH[1]}

            # Verificar permisos del usuario
            PERMISSIONS=$(gh api -X GET "repos/$REPO_OWNER/$REPO_NAME/collaborators/$COMMENT_AUTHOR/permission" | jq -r '.permission')
            if [[ "$PERMISSIONS" == "admin" || "$PERMISSIONS" == "write" ]]; then
              echo "COLUMN_NAME=$COLUMN_NAME" >> $GITHUB_ENV
            else
              echo "El usuario $COMMENT_AUTHOR no tiene permisos para agregar issues al backlog."
              exit 1
            fi
          fi

      - name: Obtener ID del proyecto y de la columna
        if: env.COLUMN_NAME != ''
        id: get_project_and_column_ids
        run: |
          PROJECT_DATA=$(gh api graphql -f query='
            query($owner: String!, $name: String!) {
              repository(owner: $owner, name: $name) {
                projectsV2(first: 10) {
                  nodes {
                    id
                    number
                    columns(first: 10) {
                      nodes {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          ' -f owner="$REPO_OWNER" -f name="$REPO_NAME")

          PROJECT_ID=$(echo "$PROJECT_DATA" | jq -r '.data.repository.projectsV2.nodes[] | select(.columns.nodes[] | .name == env.COLUMN_NAME) | .id')
          COLUMN_ID=$(echo "$PROJECT_DATA" | jq -r '.data.repository.projectsV2.nodes[] | select(.columns.nodes[] | .name == env.COLUMN_NAME) | .columns.nodes[] | select(.name == env.COLUMN_NAME) | .id')

          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "COLUMN_ID=$COLUMN_ID" >> $GITHUB_ENV

      - name: Agregar issue al backlog
        if: steps.get_project_and_column_ids.outputs.PROJECT_ID != '' && steps.get_project_and_column_ids.outputs.COLUMN_ID != ''
        run: |
          gh api graphql -f query='
            mutation($projectId: ID!, $contentId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }
          ' -f projectId="${{ steps.get_project_and_column_ids.outputs.PROJECT_ID }}" -f contentId="I_${ISSUE_NUMBER}"
